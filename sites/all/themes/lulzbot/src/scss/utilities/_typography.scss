// Wraps a styleblock in the appropriate min-width media query.
// @todo - make this breakpoint compatible.
//
// $breakpoint-name - The breakpoint map key.
@mixin respond-above($breakpoint-name) {
  $breakpoint-value: get-breakpoint($breakpoint-name);

  @if $breakpoint-value != null {
    // @media screen and (min-width: $breakpoint-value) {
    //   @content;
    // }
    @include bp($breakpoint-name) { @content };
  } @else {
    @warn "Missing breakpoint '#{$breakpoint-name}'";
  }
}

// Returns a map of a font size at all breakpoints
//
// $font-size - The $font-sizes map key.
@function text-breakpoints-for($font-size) {
  @if map-has-key($font-sizes, $font-size) {
    @return map-get($font-sizes, $font-size);
  } @else {
    @warn $font-size + " is not a key in $font-sizes.";
  }
}

// Returns a map of a font properties at the given breakpoint.
//
// $font-size - The $font-sizes map key.
// $breakpoint-name - The desired breakpoint key.
@function text-properties-for($font-size, $breakpoint-name) {
  $text-breakpoints-map: text-breakpoints-for($font-size);

  @if map-has-key($text-breakpoints-map, $breakpoint-name) {
    @return map-get($text-breakpoints-map, $breakpoint-name);
  } @else {
    @warn $breakpoint-name + " is not a valid breakpoint.";
  }
}

// Create an empty
$base-font-size-cache: ();

@function cache-base-font-size($base-font-size: body, $breakpoints: $breakpoints) {
  $breakpoint-keys: map-keys($breakpoints);

  // Exit if we already have the cache.
  @if length($base-font-size-cache) != 0 {
    @return $base-font-size-cache;
  }

  // Create a new cache map.
  $new-map: ();
  $base-breakpoints: text-breakpoints-for($base-font-size);
  $current-font-size: $browser-default-font-size;

  // This will set a font-size at every breakpoint, to make later checks easier.
  // Assumes breakpoints are keyed smallest to largest.
  @each $breakpoint-name in $breakpoint-keys {
    // Use the current breakpoint value until we encounter a new one.
    @if map-has-key($base-breakpoints, $breakpoint-name) {
      $current-font-size: nth(map-get($base-breakpoints, $breakpoint-name), 1);
    }
    $new-map: map-merge($new-map, ($breakpoint-name: $current-font-size));
  }

  @return $new-map;
}


// Returns the base font-size at the current breakpoint.
//
// $breakpoint-name - The current breakpoint key.
// $font-size - The $font-sizes map key for the base font size.
@function base-font-size($breakpoint-name: "default", $font-size: body) {
  $base-font-size-cache: cache-base-font-size($font-size, $breakpoints);
  @return map-get($base-font-size-cache, $breakpoint-name);


  $base-font-size-properties: text-properties-for($font-size, $breakpoint-name);
  @if $base-font-size-properties != null {
    @return nth($base-font-size-properties, 1);
  }

  $base-font-size-properties: text-properties-for($font-size, "default");
  @if $base-font-size-properties != null {
    @return nth($base-font-size-properties, 1);
  } @else {
    @warn "Breakpoint '#{$breakpoint-name}' for text size '#{$font-size}' is not defined";
  }
}

// Outputs the font properties of a named font-size at the given breakpoint.
//
// $font-size - The $font-sizes map key.
// $breakpoint-name - The desired breakpoint key.
@mixin text-size($font-size, $breakpoint-name: "default", $base-font-size: body) {
  $font-size-properties: text-properties-for($font-size, $breakpoint-name);

  @if $font-size-properties != null {
    @if ($font-size == $base-font-size) {
      font-size: ((nth($font-size-properties, 1)) / ($browser-default-font-size)) * 1em;
    } @else {
      $base-font-size: base-font-size($breakpoint-name);

      font-size: ((nth($font-size-properties, 1)) / ($base-font-size)) * 1rem;
    }
    line-height: ((nth($font-size-properties, 2) / nth($font-size-properties, 1))) * 1em;
  } @else {
    @warn "Breakpoint '#{$breakpoint-name}' for text size '#{$font-size}' is not defined";
  }
}

// Outputs the default and query wrapped font properties of a named font-size.
//
// $font-size - The $font-sizes map key.
// $breakpoint-name - The desired breakpoint key.
@mixin font-size($font-size, $default-breakpoint: "default") {
  @include text-size($font-size, $default-breakpoint);

  $text-breakpoints-map: text-breakpoints-for($font-size);
  $text-breakpoints-keys: map-keys($text-breakpoints-map);

  @each $breakpoint-name in $text-breakpoints-keys {
    @if $breakpoint-name != $default-breakpoint and get-breakpoint($breakpoint-name) != null {
      @include respond-above($breakpoint-name) {
        @include text-size($font-size, $breakpoint-name);
      }
    }
  }
}
